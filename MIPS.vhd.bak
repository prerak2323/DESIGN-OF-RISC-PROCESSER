library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all; -- Corrected the library name from "neumaric_std" to "numeric_std"

entity MIPS is
    port (
        clk, RST : in std_logic;
        CS, WE : out std_logic;
        ADDR : out unsigned(31 downto 0);
        Mem_Bus : inout unsigned(31 downto 0)
    );
end MIPS;

architecture structure of MIPS is 
    component REG is
        port (
            clk : in std_logic;
            RegW : in std_logic;
            DR, SR1, SR2 : in unsigned(4 downto 0);
            Reg_In : in unsigned(31 downto 0);
            ReadReg1, ReadReg2 : out unsigned(31 downto 0)
        );
    end component;

    type Operation is (and1, or1, add, sub, slt, shr, shl, jr);
    signal Op, OpSave : Operation := and1;
    type Instr_Format is (R, I, J);
    signal Format : Instr_Format := R;
    signal Instr, Imm_Ext : unsigned(31 downto 0);
    signal PC, nPC, ReadReg1, ReadReg2, Reg_In : unsigned(31 downto 0);
    signal ALU_InA, ALU_InB, ALU_Result : unsigned(31 downto 0);
    signal ALU_Result_Save : unsigned (31 downto 0);
    signal ALUorMEM, RegW, FetchDorI, Writing, REGorIMM : std_logic := '0';
    signal REGorIMM_Save, ALUorMEM_Save : std_logic := '0';
    signal DR : unsigned(4 downto 0);
    signal State, nState : integer range 0 to 4 := 0;

    constant addi : unsigned(5 downto 0) := "001000";
    constant andi : unsigned(5 downto 0) := "001100";
    constant ori : unsigned(5 downto 0) := "001101";
    constant lw : unsigned(5 downto 0) := "100011";
    constant sw : unsigned(5 downto 0) := "101011";
    constant beq : unsigned(5 downto 0) := "000100"; -- Corrected from "bnq" to "beq"
    constant bne : unsigned(5 downto 0) := "000101";
    constant jump : unsigned(5 downto 0) := "000010";

    alias opcode : unsigned(5 downto 0) is Instr(31 downto 26);
    alias SR1 : unsigned(4 downto 0) is Instr(25 downto 21);
    alias SR2 : unsigned(4 downto 0) is Instr(20 downto 16);
    alias F_Code : unsigned(5 downto 0) is Instr(5 downto 0);
    alias NumShift : unsigned(4 downto 0) is Instr(10 downto 6);
    alias ImmField : unsigned(15 downto 0) is Instr(15 downto 0);

    -- Instantiate the Register File
    A1: REG port map (clk, RegW, DR, SR1, SR2, Reg_In, ReadReg1, ReadReg2);

    -- Sign extend immediate field
    Imm_Ext <= x"FFFF" & Instr(15 downto 0) when Instr(15) = '1' else x"0000" & Instr(15 downto 0);

    -- Destination Register MUX (MUX1)
    DR <= Instr(15 downto 11) when Format = R else Instr(20 downto 16);

    -- ALU MUX (MUX2)
    ALU_InA <= ReadReg1;
    ALU_InB <= Imm_Ext when REGorIMM_Save = '1' else ReadReg2;

    -- Data MUX
    Reg_In <= Mem_Bus when ALUorMEM_Save = '1' else ALU_Result_Save;

    -- Determine instruction format
    Format <= R when opcode = 0 else J when opcode = 2 else I;

    -- Drive memory bus only during writes
    Mem_Bus <= ReadReg2 when Writing = '1' else (others => 'Z');

    -- ADDR Mux
    ADDR <= PC when FetchDorI = '1' else ALU_Result_Save;

    process(State, PC, Instr, Format, F_Code, opcode, Op, ALU_InA, ALU_InB, Imm_Ext)
    begin
        FetchDorI <= '0'; CS <= '0'; WE <= '0'; RegW <= '0'; Writing <= '0';
        ALU_Result <= (others => '0');
        nPC <= PC; Op <= jr; REGorIMM <= '0'; ALUorMEM <= '0';

        case State is
            when 0 =>  -- fetch instruction
                nPC <= PC + 1; CS <= '1'; nState <= 1; -- increment by 1 since word address
                FetchDorI <= '1';

            when 1 =>
                nState <= 2; REGorIMM <= '0'; ALUorMEM <= '0';
                if Format = J then
                    nPC <= "000000" & Instr(25 downto 0); nState <= 0; -- jump, and finish-- offset not multiplied by 4 since mem is word address
                elsif Format = R then-- register instructions
                    case F_Code is
                        when "100000" => Op <= add;  -- add
                        when "100010" => Op <= sub;  -- subtract
                        when "100100" => Op <= and1; -- and
                        when "100101" => Op <= or1;  -- or
                        when "101010" => Op <= slt;  -- set on less than
                        when "000010" => Op <= shr;  -- shift right
                        when "000000" => Op <= shl;  -- shift left
                        when "001000" => Op <= jr;  -- jump register
                        when others => null;
                    end case;
                elsif Format = I then -- immediate instructions
                    REGorIMM <= '1';
                    case opcode is
                        when lw | sw | addi => Op <= add;
                        when beq | bne => Op <= sub; REGorIMM <= '0';
                        when andi => Op <= and1;
                        when ori => Op <= or1;
                        when others => null;
                    end case;
                    if opcode = lw then ALUorMEM <= '1'; end if;
                end if;

            when 2 =>
                nState <= 3;
                case OpSave is
                    when and1 => ALU_Result <= ALU_InA and ALU_InB;
                    when or1 => ALU_Result <= ALU_InA or ALU_InB;
                    when add => ALU_Result <= ALU_InA + ALU_InB;
                    when sub => ALU_Result <= ALU_InA - ALU_InB;
                    when shr => ALU_Result <= ALU_InB srl to_integer(NumShift);
                    when shl => ALU_Result <= ALU_InB sll to_integer(NumShift);
                    when slt => -- set on less than
                        if ALU_InA < ALU_InB then ALU_Result <= x"00000001";
                        else ALU_Result <= x"00000000";
                        end if;
                    when others => null;
                end case;

                if ((ALU_InA = ALU_InB) and opcode = beq) or
                   ((ALU_InA /= ALU_InB) and opcode = bne) then
                    nPC <= PC + Imm_Ext; nState <= 0;
                elsif opcode = bne or opcode = beq then
                    nState <= 0;
                elsif OpSave = jr then
                    nPC <= ALU_InA; nState <= 0;
                end if;

            when 3 =>
                nState <= 0;
                if Format = R or opcode = addi or opcode = andi or opcode = ori then
                    RegW <= '1';
                elsif opcode = sw then
                    CS <= '1'; WE <= '1'; Writing <= '1';
                elsif opcode = lw then
                    CS <= '1'; nState <= 4;
                end if;

            when 4 =>
                nState <= 0; CS <= '1';
                if opcode = lw then RegW <= '1'; end if;

            when others => null;
        end case;
    end process;

    process(clk)
    begin
        if rising_edge(clk) then
            if RST = '1' then
                State <= 0;
                PC <= x"00000000";
            else
                State <= nState;
                PC <= nPC;
            end if;

            if State = 0 then Instr <= Mem_Bus; end if;
            if State = 1 then
                OpSave <= Op;
                REGorIMM_Save <= REGorIMM;
                ALUorMEM_Save <= ALUorMEM;
            end if;
            if State = 2 then ALU_Result_Save <= ALU_Result; end if;
        end if;
    end process;
end structure;
